---
title: "Hands on Exercise 3"
date: "28 January 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---


# Installing and Loading relevant R packages


```{r}
pacman::p_load(sf, spatstat, raster, maptools, tmap)
```


# Spatial Data Wrangling

## Import spatial data


```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer = "CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```


Both mpsz_sf and sg_sf are projecting with SVY21 but are currently using EPSG:9001. We can check by using st_crs().

## Convert data into dataframe


```{r}
sg_sf <- st_sf(sg_sf) %>%
  st_transform(crs = 3414)
```

```{r}
mpsz_sf <- st_sf(mpsz_sf) %>%
  st_transform(crs = 3414)
```


## Mapping geospatial datasets


```{r}
tmap_mode("plot")
qtm(mpsz_sf) + 
  qtm(childcare_sf)
```

```{r}
tmap_mode("plot")
```


Alternative given by prof:


```{r}
tmap_mode("view")
tm_shape(childcare_sf) +
  tm_dots()
```


# Geospatial Data wrangling

## Converting sf data frames to sp's Spatial class


```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```


Display information of spatial class


```{r}
st_crs(childcare)
```


### Converting Spatial class into generic sp format

spatstat requires data to be in ppp object form Classes -\> sp -\> ppp


```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```


### Converting the generic sp format into spatstat ppp format


```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```


### Handling duplicated points

To check whether theres any duplicates:


```{r}
any(duplicated(childcare_ppp))
```


To count number of co-indicence point, use multiplicity


```{r}
# multiplicity(childcare_ppp)
```


To know how mnay locations have more than one point events:


```{r}
sum(multiplicity(childcare_ppp) > 1)
```


There is 128 duplicated point events


```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha = 0.4,
          size = 0.05)
```

```{r}
tmap_mode('plot')
```


Ways to solve duplication problems: - 1. Delete duplicates -- Cons: some useful point may be lost - 2. Use jittering: Adds a small perturbation so that duplicates do not occupy the same space - 3. Make each point unique

This code uses No.2 approach


```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry = TRUE,
                             nsim = 1,
                             drop = TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```


### Creating owin object

Object called owin is designed to represent polygonal region.


```{r}
sg_owin <- as(sg_sp, "owin")

plot(sg_owin)
```

```{r}
summary(sg_owin)
```


### Combining point events object and owin object

Output combines the point and polygon feature in one ppp object class


```{r}
childcareSG_ppp = childcare_ppp[sg_owin]

summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```


### First-order Spatial Point Patterns

#### Computing kernel density estimation using automatic bandwidth selection method


```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)
```


We can retrieve the bandwidth used to comput4e the kde layer


```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```


#### Rescalling KDE values


```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```


After rescaling, we can place it back through density()


```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```


#### Working with different automatic bandwidth methods

The code chunks below returns bandwidth using different methods


```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```


bw.ppl tends to produce more appropriate values when pattern consists predominantly of tight clusters bw.diggle is best when used to detect a single tight cluster in the midst of random noise

The code chunk below compares the plot output using bw.diggle and bw.ppl


```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```


Code chunk compares kernel methods: Gaussian, Epanechnikov, Quartic, Dics


```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```


## Fixed and Adaptive KDE

### Computing KDE by using fixed bandwidth


```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)

#signma = 0.6 refers to bandwidth of 600meter or 0.6km
```


### Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skew distribution. To overcome this problem, use adaptive bandwidth: density.adaptive() of spatstat


```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")

plot(kde_childcareSG_adaptive)
```


Comparing fixed and adaptive:


```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```


### Converting KDE output into grid object


```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```


#### Converting gridded output into raster


```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)

kde_childcareSG_bw_raster
```


Notice that crs property is NA

#### Assigning projection systems

Codechunk below is used to include CRS information in kde_childcareSG_bw_raster


```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")

kde_childcareSG_bw_raster
```


Now, crs property is complete

### Visualising the output in tmap


```{r}
tm_shape(kde_childcareSG_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```


### Comparing Spatial Point Patterns using KDE

#### Extract the target planning areas


```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```


#### Converting the spatial point data frame into generic sp format


```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```


#### Creating owin object


```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```


#### Combining childcare points and the study area


```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```


Use rescale() functions to change unit of measurement from m to km.


```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```


#### Computing KDE

Compute the KDE of these 4 planning areas. bw.diggle is used to derive bandwidth


```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```


#### Computing bandwidth KDE


```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```


## Nearest Neighbour Analysis

We will use the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat

The test hypotheses are:

H0 = The distribution of childcare services are randomly distributed H1 = The distribution of childcare services are not randomly distributed.

### Testing spatial point patterns using Clark and Evans Test


```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```


# Second-order Spatial Point Patterns Analysis

## Analysing Spatial Point Process Using G-Function

G functions is used to measure the distribution of the distances from an arbitrary event to its nearest event. This is computed by using Gest() of spatstat package.

### Choa Chu Kang planning area


```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim = c(0,500))
```

