---
title: "In-class Exercise 7: Global and Local Measures"
date: "20 February 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Getting Started

Unlike the Hands-on Ex07, we will mainly use sfdep package for calculating the global and local measures. This is because spdep is going to be discontinued.

## Load packages:

```{r}
pacman::p_load(sf,sfdep,tmap,tidyverse)
```

## Load Geospatial Data

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

## Load Aspatial Data

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing relational join

```{r}
hunan_GDPPC <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

# Global Measures of Spatial Association

## Deriving contiguity weights: Queen's method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

## Computing Global Moran's I

```{r}
moranI <- global_moran(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt)
```

## Performing Global Moran's I Test

```{r}
global_moran_test(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt)
```

## Performing Global Moran'I permutation test

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt,
                  nsim=99)
```

## Computing Local Moran's I

```{r}
lisa <- wm_q %>%
  mutate(local_moran = local_moran(GDPPC,
                                   nb,
                                   wt, 
                                   nsim =99),
         .before = 1) %>%
  unnest(local_moran)
lisa
```

## Visualizing Lisa

### Visualize Local Moran's I plot

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") +
  tm_borders(alpha = 0.5)+
  tm_view(set.zoom.limits = c(6,8))
```

### p-value plot

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii") +
  tm_borders(alpha = 0.5)+
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
lisa_sig <- lisa %>%
  filter(p_ii <0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") +
  tm_borders(alpha = 0.4)
```

# Hot Spot and Cold Spot Analysis

## Computing local Moran'sI

```{r}
HCSA <- wm_q %>%
  mutate(local_Gi = local_gstar_perm(
    GDPPC, nb, wt, nsim =99),
    .before = 1) %>%
  unnest(local_Gi)
HCSA
```

## Visualizing Gi\*

```{r}
tmap_mode("view")
tm_shape(HCSA)+
  tm_fill("gi_star") +
  tm_borders(alpha=0.5)+
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") +
  tm_borders(alpha = 0.5)
```

```{r}
pacman::p_load(plotly)
```

```{r}
GDPPC <- read_csv("data/aspatial/Hunan_GDPPC.csv")
```

## Creating a Time Series Cube

The code chunk below creates a spatio-temporal cube by using spacetime() from the sfdep packagePC

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
```

```{r}
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>%
  mutate(
    nb = include_self(st_contiguity(geometry)),
    wt = st_weights(nb)) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

### Computing Gi

```{r}
gi_star <- GDPPC_nb %>%
  group_by(Year) %>%
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt, nsim = 99)) %>%
  tidyr::unnest(gi_star)
```

### Performing Emerging Hotspot analysis

```{r, echo = FALSE, eval = FALSE}
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st,
  .var = "GDPPC",
  k =1,
  nsim = 99)
```
