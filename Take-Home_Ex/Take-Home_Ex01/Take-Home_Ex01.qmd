---
title: "Take Home Exercise 1"
date: "30 January 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Setting the Scene

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.

The data we will be using here are:

-   Aspatial Data

    -   WPdx Global Data Repositories: [WPdx+](https://data.waterpointdata.org/dataset/Water-Point-Data-Exchange-Plus-WPdx-/eqje-vguj/data) data set

-   Geospatial Data

    -   State Boundary GIS: [geoBoundaries](https://www.geoboundaries.org/) data set

# Install & Load Packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse, funModeling)
```

# Load Data into Rstudio

## Load Geospatial data in

```{r}
geoNGA2 <- st_read(dsn = "data/geospatial", layer = "nga_admbnda_adm2_osgof_20190417")
```

## Load Aspatial Data in

```{r}
wp_nga <- read_csv("data/aspatial/WPDX.csv") %>%
  filter(`#clean_country_name` == "Nigeria", `#clean_adm1` =="Osun")
```

# Geospatial Data wrangling

## Check duplicates

We have to check the data for any duplicated names. After checking, there are several duplicates and thus we get their indices out and replace them with the corresponding names.

```{r}
geoNGA2$ADM2_EN[duplicated(geoNGA2$ADM2_EN) == TRUE]
```

```{r}
duplicated_LGA <- geoNGA2$shapeName[duplicated(geoNGA2$shapeName) == TRUE]

# Get all the indices with names that are included in the duplicated LGA names
duplicated_indices <- which(geoNGA2$shapeName %in% duplicated_LGA)

geoNGA2$ADM2_EN[94] <- "Bassa, Kogi"
geoNGA2$ADM2_EN[95] <- "Bassa, Plateau"
geoNGA2$ADM2_EN[304] <- "Ifelodun, Kwara"
geoNGA2$ADM2_EN[305] <- "Ifelodun, Osun"
geoNGA2$ADM2_EN[355] <- "Irepodun, Kwara"
geoNGA2$ADM2_EN[356] <- "Irepodun, Osun"
geoNGA2$ADM2_EN[519] <- "Nasarawa, Kano"
geoNGA2$ADM2_EN[520] <- "Nasarawa, Nasarawa"
geoNGA2$ADM2_EN[546] <- "Obi, Benue"
geoNGA2$ADM2_EN[547] <- "Obi, Nasarawa"
geoNGA2$ADM2_EN[693] <- "Surulere, Lagos"
geoNGA2$ADM2_EN[694] <- "Surulere, Oyo"
```

The code chunk below filters out geoNGA2 into Osun state Local Government Area

```{r}
osun_LGA <- c("Aiyedade","Aiyedire","Atakumosa East",	"Atakumosa West",	
              "Ede North",	"Ede South",	"Egbedore",	"Ejigbo",	"Ife Central",	
              "Ife East",	"Ife North",	"Ife South",	"Ifedayo",	"Ila",
              "Ifelodun, Osun","Irepodun, Osun","Ilesha East",	"Ilesha West",
              "Irewole",	"Isokan",	"Iwo",	"Obokun",	"Odo-Otin",	"Ola-oluwa",	
              "Olorunda",	"Oriade",	"Orolu",	"Osogbo", "Boripe", "Boluwaduro")
osun <- geoNGA2 %>%
  filter(ADM2_EN %in% osun_LGA)
```

We will use st_crs() to check the crs of geoNGA2

```{r}
st_crs(geoNGA2)
```

We can see that currently geoNGA2 is in EPSG:4326. We have to convert to 26392 by using st_transform. The code chunk below transforms the data to crs = 26392 and is filtered by shapeName to our study area, Osun.

```{r}
osun <- osun %>%
  st_transform(crs = 26392)
```

## Plot Geospatial Data

```{r}
plot(osun)
```

# Aspatial Data wrangling

## Create simple feature on wp_nga

Using what we learn on Hands-on Exercise 1, we can create a simple feature using st_as_sf() from the sf package. We have to ensure that the file follows the same crs and therefore we use st_transform again to convert it into crs = 26392.

```{r}
wp_nga_sf <- st_as_sf(wp_nga, coords = c("#lon_deg", "#lat_deg"), crs = 4326) %>%
  st_transform(crs = 26392)
```

## Cleaning up NA entries in aspatial data

By using the functions in the dplyr package, we can use rename() to rename #status_clean to status_clean, select() to pick the required column variable and replacing NA to unknown.

```{r}
wp_nga_sf <- wp_nga_sf %>%
  rename(status_clean = `#status_clean`) %>% 
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```

## Filter out functional and non-functional data

By using filter() from the dplyr package, we can filter out entries with functional and non-functional water points.

```{r}
wp_functional <- wp_nga_sf %>%
    filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))

wp_nonfunctional <- wp_nga_sf %>%
  filter(status_clean %in% 
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

## Population Data

### Load Data in and select relevant columns

```{r}
nga_pop <- read_csv("data/pop_data_nga.csv")
  
osun_pop <- nga_pop %>% 
  filter(nga_pop$`State    ` == "Osun") %>%
  rename(ADM2_EN = `Local gov. area▲`, 
         HASC = `HASC    `,
         Capital = `Capital     `, 
         Population = `Population    `)
```

### Ensure Names match with osun

```{r}
osun_pop[1,1] <- "Aiyedade"
osun_pop[3,1] <- "Atakumosa East"
osun_pop[4,1] <- "Atakumosa West"
osun_pop[20,1] <- "Irepodun, Osun"
osun_pop[16,1] <- "Ifelodun, Osun"
```

Once names have matched, we can merge the tibble as one dataset

```{r}
osun_pop_density <- osun %>%
  left_join(osun_pop, by = "ADM2_EN")
```

We can then have the population density of Osun by its local government areas (LGA). The code chunk below will generate the plot. Further down, we will discuss why having a population density mapping is important in formulating our hypothesis claim.

```{r}
tmap_mode("plot")
tm_shape(osun_pop_density) +
  tm_fill("Density",
          style = "quantile",
          palette = "Blues",
          title = "Population Density") +
  tm_layout(main.title = "Population Density of Osun LGA",
            main.title.position = "center",
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: http://www.geo-ref.net/ph/nga.htm", 
             position = c("left", "bottom"))
    
```

# Kernel Density Analysis

## Converting object to relevant datatype

We have to convert sf to sp then to ppp so that it is readable by the spatstat package \### Convert sf to sp Spatial class

```{r}
osun_spatial <- as(osun, "Spatial")

wp_functional_spatial <- as(wp_functional, "Spatial")
wp_nonfunctional_spatial <- as(wp_nonfunctional, "Spatial")
```

### Converting the Spatial point data frame into generic SP format

```{r}
osun_sp <- as(osun_spatial, "SpatialPolygons")
wp_func_sp <- as(wp_functional_spatial, "SpatialPoints")
wp_nonfunc_sp <- as(wp_nonfunctional_spatial, "SpatialPoints")
```

### Convert sp to spatstat ppp format

```{r}
wp_func_ppp <- as(wp_func_sp, "ppp")
wp_nonfunc_ppp <- as(wp_nonfunc_sp, "ppp")
```

## Create owin object

```{r}
osun_owin <- as(osun_sp, "owin")
```

## Combine waterpoints and study area together

```{r}
osun_wpfunc <- wp_func_ppp[osun_owin]

osun_wpnonfunc <- wp_nonfunc_ppp[osun_owin]
```

## Rescaling

Before we go on to calculate the kernal density, we should rescale the data as taught in Hands-on Ex 4 Chapter 5.

```{r}
osun_wpfunc_km <- rescale(osun_wpfunc, 1000, "km")
osun_wpnonfunc_km <- rescale(osun_wpnonfunc, 1000, "km")
```

## Creating Kernal Density Estimate

```{r}
kde_func<-density(osun_wpfunc_km,
                  sigma=bw.diggle,
                  edge=TRUE,
                  kernel="gaussian")

kde_nonfunc <- density(osun_wpnonfunc_km,
                       sigma=bw.diggle,
                       edge= TRUE,
                       kernel = "gaussian")

par(mfrow = c(1,2))
plot(kde_func, main = "Functional Water Points")
plot(kde_nonfunc, main = "Non-Functional Water Points")
```

## Convert KDE output into gridded objects

For mapping purposes, we can convert the KDE output into a grid object. To do so, we can use as.SpatialGridDataFrame.im() from raster

```{r}
gridded_osun_wp <- as.SpatialGridDataFrame.im(kde_func)
gridded_osun_nwp <-as.SpatialGridDataFrame.im(kde_nonfunc)

```

## Convert gridded object into raster

After converting the KDE output into a gridded object, we can use raster() from the raster package to then convert it into raster.

```{r}
osun_wp_raster <- raster(gridded_osun_wp)
osun_nwp_raster <- raster(gridded_osun_nwp)

osun_wp_raster
osun_nwp_raster
```

The output of the above code chunk shows that crs in both raster object is NA. We have to input the crs = 26392 and ensure the measurements are in "km".

```{r}
projection(osun_wp_raster) <- CRS("+init=EPSG:26392 +units=km")
projection(osun_nwp_raster) <- CRS("+init=EPSG:26392 +units=km")

osun_wp_raster ; osun_nwp_raster
```

Now, we can see that the crs has been inputted in.

## Visualising the data

The code chunk below visualises the raster onto the OpenStreetMap layout and by setting the zoom.limits to 9 and 14, it fixes the map to the specific region, Osun.

```{r}
tmap_mode("view") 
tm_basemap(server ="OpenStreetMap") + 
  tm_shape(osun_wp_raster) + 
  tm_raster("v") +
  tm_layout(title = "Functional Waterpoints Density", 
            legend.position = c("right", "Top"), 
            frame = FALSE) +
  tm_view(set.zoom.limits =c(9,14))

tm_basemap(server ="OpenStreetMap") + 
  tm_shape(osun_nwp_raster) + 
  tm_raster("v") + 
  tm_layout(title = "Non-Functional Waterpoints Density", 
            legend.position = c("right", "top"), 
            frame = FALSE) +
  tm_view(set.zoom.limits =c(9,14))
```

## Advantages of Kernal Density Map over Point Map

# Second-Order Spatial Point Patterns Analysis

## G-function

The nearest-neighbour distance is the measure of the distance between a point and its closest neighboring point.

Gest() of spatstat package is used to compute the G function

```{r}
G_FWP <- Gest(wp_func_ppp, correction = "border")
G_NFWP <- Gest(wp_nonfunc_ppp, correction = "border")
par(mfrow = c(2,1))
plot(G_FWP, xlim = c(0,500)) ; plot(G_NFWP, xlim = c(0,500))
```

## F function

Unlike the G function, the F function in Fest() is used to measure the distribution of nearest neighbour distances. The code chunk below showcases this:

```{r}
# Functional Water Point
F_FWP<- Fest(wp_func_ppp)
plot(F_FWP) 
```

```{r}
# Non-Functional WaterPoints
F_NFWP <- Fest(wp_nonfunc_ppp)
plot(F_NFWP)
```

## L Function

```{r}
L_FWP <- Lest(wp_func_ppp, correction = "Ripley")
plot(L_FWP, .-r ~r, ylab="L(d)-r", xlab ="d(m)")

L_NFWP <- Lest(wp_nonfunc_ppp, correction = "Ripley")
plot(L_NFWP, .-r ~r, ylab="L(d)-r", xlab ="d(m)")
```

# Performing Complete Spatial Randomness Test

In running the test, we will be using envelope() from spatstat.

The null and alternative hypothesis are:

Ho : The distribution of functional waterpoints in Osun State are randomly distributed

H1 : The distribution of functional waterpoints in Osun State are not randomly distributed

We will use the 95% confidence level in our test.

The null hypothesis will be rejected if p-value is smaller than the alpha value, 0.005.

```{r}
L_FWP_test <- envelope(wp_func_ppp, Lest, nsim = 49, rank = 1, glocal= TRUE)

plot(L_FWP_test, xlim = c(0,500))
```

Simulation shows that the black line is outside the 95% Confidence interval for all values of r. We can thus reject the null hypothesis for all values of r.

This makes sense as we've put together population density with the dot plots of where the functional water points are at.

# Spatial Correlation Analysis

```{r}
pacman::p_load(sfdep)
```

## Local Colocation Quotients (LCLQ)

### Preparing nearest neighbours list

st_knn() of sfdep package is used to determine the 6 nearest neighbours for a given point geometry.

```{r}
nb <- include_self(
  st_knn(st_geometry(wp_nga_sf),6))
```

Afterwhich, we will use st_kernel_weights() of sfdep package to derive a weights list by using a kernal function. We will be using the gaussian method and the mathematical equations is:

![](images/image-1645366350.png)

```{r}
wt <- st_kernel_weights(nb,
                        wp_nga_sf,
                        "gaussian",
                        adaptive = TRUE)
```

```{r}
wp_functional$status_clean[1:length(wp_functional$status_clean)] <- "Functional" 
wp_nonfunctional$status_clean[1:length(wp_nonfunctional$status_clean)] <- "Non-Functional"

A <- wp_functional$status_clean

B <- wp_nonfunctional$status_clean

LCLQ <- local_colocation(A,B, nb, wt, 49)

LCLQ_wp <- cbind(wp_nga_sf, LCLQ) %>%
  na.exclude()
```

```{r}
tmap_mode("view")
tm_shape(osun) +
  tm_polygons() +
tm_shape(LCLQ_wp) +
  tm_dots(col = "Non.Functional",
          size = 0.01,
          border.col = "black",
          border.lwd = 0.5) +
tm_shape(LCLQ_wp) +
  tm_dots(col = "p_sim_Non.Functional",
          size = 0.01,
          border.col = "black",
          border.lwd = 0.5)
```

```{r}
head(LCLQ_wp, 5)
```

Due to rounding, the graph shows Non.Functional local colocation as 1 but in fact it is less than one. Since p-value is less than 0.05, we can say that Functional and Non-functional water points are independent from each other.

```{r}
pacman::p_load(spdep)
```
