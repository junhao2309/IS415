[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands on Exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, spatstat, raster, maptools, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-spatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-spatial-data",
    "title": "Hands on Exercise 3",
    "section": "2.1 Import spatial data",
    "text": "2.1 Import spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex03/data/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex03/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex03/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBoth mpsz_sf and sg_sf are projecting with SVY21 but are currently using EPSG:9001. We can check by using st_crs()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#convert-data-into-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#convert-data-into-dataframe",
    "title": "Hands on Exercise 3",
    "section": "2.2 Convert data into dataframe",
    "text": "2.2 Convert data into dataframe\n\nsg_sf <- st_sf(sg_sf) %>%\n  st_transform(crs = 3414)\n\n\nmpsz_sf <- st_sf(mpsz_sf) %>%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-geospatial-datasets",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-geospatial-datasets",
    "title": "Hands on Exercise 3",
    "section": "2.3 Mapping geospatial datasets",
    "text": "2.3 Mapping geospatial datasets\n\ntmap_mode(\"plot\")\nqtm(mpsz_sf) + \n  qtm(childcare_sf)\n\n\n\n\n\ntmap_mode(\"plot\")\n\nAlternative given by prof:\n\ntmap_mode(\"view\")\ntm_shape(childcare_sf) +\n  tm_dots()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Hands on Exercise 3",
    "section": "3.1 Converting sf data frames to sp’s Spatial class",
    "text": "3.1 Converting sf data frames to sp’s Spatial class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\nDisplay information of spatial class\n\nst_crs(childcare)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n3.1.1 Converting Spatial class into generic sp format\nspatstat requires data to be in ppp object form Classes -> sp -> ppp\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\n3.1.2 Converting the generic sp format into spatstat ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n3.1.3 Handling duplicated points\nTo check whether theres any duplicates:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count number of co-indicence point, use multiplicity\n\n# multiplicity(childcare_ppp)\n\nTo know how mnay locations have more than one point events:\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nThere is 128 duplicated point events\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha = 0.4,\n          size = 0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\nWays to solve duplication problems: - 1. Delete duplicates – Cons: some useful point may be lost - 2. Use jittering: Adds a small perturbation so that duplicates do not occupy the same space - 3. Make each point unique\nThis code uses No.2 approach\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry = TRUE,\n                             nsim = 1,\n                             drop = TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n3.1.4 Creating owin object\nObject called owin is designed to represent polygonal region.\n\nsg_owin <- as(sg_sp, \"owin\")\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\n3.1.5 Combining point events object and owin object\nOutput combines the point and polygon feature in one ppp object class\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n3.1.6 First-order Spatial Point Patterns\n\n3.1.6.1 Computing kernel density estimation using automatic bandwidth selection method\n\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\nWe can retrieve the bandwidth used to comput4e the kde layer\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n3.1.6.2 Rescalling KDE values\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\nAfter rescaling, we can place it back through density()\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n3.1.6.3 Working with different automatic bandwidth methods\nThe code chunks below returns bandwidth using different methods\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nbw.ppl tends to produce more appropriate values when pattern consists predominantly of tight clusters bw.diggle is best when used to detect a single tight cluster in the midst of random noise\nThe code chunk below compares the plot output using bw.diggle and bw.ppl\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\nCode chunk compares kernel methods: Gaussian, Epanechnikov, Quartic, Dics\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "title": "Hands on Exercise 3",
    "section": "3.2 Fixed and Adaptive KDE",
    "text": "3.2 Fixed and Adaptive KDE\n\n3.2.1 Computing KDE by using fixed bandwidth\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n#signma = 0.6 refers to bandwidth of 600meter or 0.6km\n\n\n\n3.2.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution. To overcome this problem, use adaptive bandwidth: density.adaptive() of spatstat\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\n\nplot(kde_childcareSG_adaptive)\n\n\n\n\nComparing fixed and adaptive:\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n3.2.3 Converting KDE output into grid object\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n3.2.3.1 Converting gridded output into raster\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\nNotice that crs property is NA\n\n\n3.2.3.2 Assigning projection systems\nCodechunk below is used to include CRS information in kde_childcareSG_bw_raster\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\nNow, crs property is complete\n\n\n\n3.2.4 Visualising the output in tmap\n\ntm_shape(kde_childcareSG_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n3.2.5 Comparing Spatial Point Patterns using KDE\n\n3.2.5.1 Extract the target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n3.2.5.2 Converting the spatial point data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n3.2.5.3 Creating owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n3.2.5.4 Combining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nUse rescale() functions to change unit of measurement from m to km.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n3.2.5.5 Computing KDE\nCompute the KDE of these 4 planning areas. bw.diggle is used to derive bandwidth\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n3.2.5.6 Computing bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "title": "Hands on Exercise 3",
    "section": "3.3 Nearest Neighbour Analysis",
    "text": "3.3 Nearest Neighbour Analysis\nWe will use the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat\nThe test hypotheses are:\nH0 = The distribution of childcare services are randomly distributed H1 = The distribution of childcare services are not randomly distributed.\n\n3.3.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands on Exercise 3",
    "section": "4.1 Analysing Spatial Point Process Using G-Function",
    "text": "4.1 Analysing Spatial Point Process Using G-Function\nG functions is used to measure the distribution of the distances from an arbitrary event to its nearest event. This is computed by using Gest() of spatstat package.\n\n4.1.1 Choa Chu Kang planning area\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim = c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Getting Started\nLoad packages\n\npacman::p_load(tmap, tidyverse, sf)\n\n\n\nImporting Geospatial Data into R\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Preparation\nContext: Before a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\nYOUNG: age group 0 to 4 until age groyup 20 to 24, ECONOMY ACTIVE: age group 25-29 until age group 60-64, AGED: age group 65 and above, TOTAL: all age group, and DEPENDENCY: the ratio between young and aged against economy active group\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12]), \n         ECONOMY_ACTIVE = rowSums(.[7:11]) +\n           rowSums(.[13:15]), \n         AGED = rowSums(.[16:21]),\n  #Column 3 to 6 and column 12 are under 24 yrs old\n  #Column 7 to 11 and 13 - 15 are between 25 - 64\n  #Column 16 to 21 are 65 and above\n         TOTAL = rowSums(.[3:21]),\n         DEPENDENCY = (YOUNG + AGED)\n         /ECONOMY_ACTIVE) %>%\n  select(PA, SZ, \n         YOUNG, ECONOMY_ACTIVE, AGED,\n         TOTAL, DEPENDENCY)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n#rowSums() tallies the sum of values in the columns specified\n\nJoining the attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = funs(toupper)) |>\n  filter(ECONOMY_ACTIVE > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\npopdata2020\n\n# A tibble: 234 × 7\n   PA         SZ                     YOUNG ECONOMY_ACTIVE  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                  <dbl>          <dbl> <dbl> <dbl>      <dbl>\n 1 ANG MO KIO ANG MO KIO TOWN CENTRE  1300           2780   770  4850      0.745\n 2 ANG MO KIO CHENG SAN               5640          16400  6080 28120      0.715\n 3 ANG MO KIO CHONG BOON              5080          15040  6450 26570      0.767\n 4 ANG MO KIO KEBUN BAHRU             4590          12950  5080 22620      0.747\n 5 ANG MO KIO SEMBAWANG HILLS         1900           3620  1270  6790      0.876\n 6 ANG MO KIO SHANGRI-LA              3320           9080  3540 15940      0.756\n 7 ANG MO KIO TAGORE                  1920           4460  1520  7900      0.771\n 8 ANG MO KIO TOWNSVILLE              4220          11930  5050 21200      0.777\n 9 ANG MO KIO YIO CHU KANG EAST       1070           2350   740  4160      0.770\n10 ANG MO KIO YIO CHU KANG WEST       5710          13710  4680 24100      0.758\n# … with 224 more rows\n\n# mutate_at(.vars = , .funs =) : vars() selects columns. funs() applies a function on all records\n#toupper converts from lower case to uppercase as a default\n\nUse left_join() to combine geospatial data and attribute table by mpsz.SUBZONE_N and popdata2020.SZ as common identifier\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020\")\n\n\n\nChoropleth Mapping Geospatial Data Using tmap\nPlotting a choropleth map quickly using qtm()\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n\n\n\n\nNotes:\n\ntmap_mode() with “plot” produces a static map whereas “view” produces an interactive mode\nfill maps the variable attribute\n\nCreating a choropleth map by using tmaps element: Similar to ggplot2, use “+” as its adding on layers to the plot\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n        style = \"quantile\",\n        palette = \"Blues\",\n        title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we are taught on the contents in Chapter 9: Global Measures of Spatial Autocorrelation and Chapter 10: Local Measures of Spatial Autocorrelation. We will be using the spdep package amongst other packages used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#analytical-problem",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#analytical-problem",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "2.1 Analytical problem",
    "text": "2.1 Analytical problem\nAs mentioned in the course materials, in spatial policy, one of the main development objective of the local government is to ensure equal distribution of development with in the province. This helps policy makers to zoom in on any unequal distribution which can be seen clustering."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#the-study-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#the-study-data",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "2.2 The Study Data",
    "text": "2.2 The Study Data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#load-packages",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "2.3 Load packages:",
    "text": "2.3 Load packages:\n\npacman::p_load(sf,spdep,tmap,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#load-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#load-data",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "2.4 Load Data",
    "text": "2.4 Load Data\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex07/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#performing-relational-join",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#performing-relational-join",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "2.5 Performing relational join",
    "text": "2.5 Performing relational join\n\nhunan <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-regional-development",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-regional-development",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "2.6 Visualising Regional Development",
    "text": "2.6 Visualising Regional Development\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-contiguity-spatial-weights",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "3.1 Computing Contiguity Spatial Weights",
    "text": "3.1 Computing Contiguity Spatial Weights\nBefore we compute the global spatial autocorrelation statistics, we need to construct the spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units in the study area.\nBy using the poly2nb() of spdep package, we can compute the coniguity weight matrices for the study area. There are two main modes, queen and rook. By using the arguments below: queen = TRUE : QUEEN queen = FALSE : ROOK\n\nwm_q <- poly2nb(hunan, \n                queen= TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary reports above shows that there are 88 area units in Hunan and the most connected area unit has 11 neighbours."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#row-standardised-weights-matrix",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "3.2 Row-standardised weights matrix",
    "text": "3.2 Row-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q,\n                   style =\"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#global-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#global-spatial-autocorrelation-morans-i",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "3.3 Global Spatial Autocorrelation: Moran’s I",
    "text": "3.3 Global Spatial Autocorrelation: Moran’s I\nWe will perform the Moran’s I statistics testing by using moran.test() of spdep.\n\n3.3.1 Moran’s I Test\n\nmoran.test(hunan$GDPPC,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action= na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nBy running the moran test, we look at the p value. If p value is less than alpha set, the result is significant.\n\nKnowing how to read the Moran Test Statistic\n\n\n\n\n\n\nSignificance and z-value\nExplanation\n\n\n\n\nThe p-value is not statistically significant.\nYou cannot reject the null hypothesis. It is quite possible that the spatial distribution of feature values is the result of random spatial processes. The observed spatial pattern of feature values could very well be one of many, many possible versions of complete spatial randomness (CSR).\n\n\nThe p-value is statistically significant, and the z-score is positive.\nYou may reject the null hypothesis. The spatial distribution of high values and/or low values in the dataset is more spatially clustered than would be expected if underlying spatial processes were random.\n\n\nThe p-value is statistically significant, and the z-score is negative.\nYou may reject the null hypothesis. The spatial distribution of high values and low values in the dataset is more spatially dispersed than would be expected if underlying spatial processes were random. A dispersed spatial pattern often reflects some type of competitive process—a feature with a high value repels other features with high values; similarly, a feature with a low value repels other features with low values.\n\n\n\nCredits: https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-spatial-autocorrelation-moran-s-i-spatial-st.htm#:~:text=the%20null%20hypothesis.-,Interpretation,context%20of%20its%20null%20hypothesis.\n\n\n3.3.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs the permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n3.3.3 Visualising Monte Carlo Moran’s I\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWe can see here that the graph is skewed to the right but mainly falls around the negative range."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#global-spatial-autocorrelation-gearys",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#global-spatial-autocorrelation-gearys",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "3.4 Global Spatial Autocorrelation: Geary’s",
    "text": "3.4 Global Spatial Autocorrelation: Geary’s\n\n3.4.1 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm = geary.mc(hunan$GDPPC,\n                 listw=rswm_q,\n                 nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n3.4.2 Visualising the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#spatial-correlogram",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "3.5 Spatial Correlogram",
    "text": "3.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data.\n\n3.5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep pacakage.\n\nMI_corr <- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order = 6,\n                          method=\"I\",\n                          style = \"W\")\nplot(MI_corr)\n\n\n\n\nPlotting shows the output but does not provide the full interpretation as each autocorrelation value is not statistically significant. The code chunk below shows each point and their statistical significance.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n3.5.2 Compute Geary’s correlogram and plot\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#cluster-and-outlier-analysis",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "4.1 Cluster and Outlier Analysis",
    "text": "4.1 Cluster and Outlier Analysis\n\n4.1.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used.\nThe code chunks below are used to compute local Moran’s I\n\nfips <- order(hunan$County)\nlocalMI <-localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix\n\nprintCoefmat(data.frame(localMI[fips,],\n                        row.names =hunan$County[fips]),\n             check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n4.1.2 Mapping Local Moran’s\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.1.3 Mapping Local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chunk below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.1.4 Mapping local Moran’s I p-values.\nIt may be better to show p-values to see which regions are statistically significant\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.1.5 Mapping both local Moran’s I values and p-values\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#creating-a-lisa-cluster-map",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Creating a LISA Cluster Map",
    "text": "4.2 Creating a LISA Cluster Map\n\n4.2.1 Plotting Moran scatterplot\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n4.2.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\nas.vector() is added to make sure the data type is a vector that can be map neatly into a dataframe.\nWe can then plot the scatter plot using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n4.2.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map\n\nquadrant <- vector(mode=\"numeric\",\n                   length=nrow(localMI))\n\nNext, derive the spatially lagged variable of interest and centres the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is followed by centering the local Moran’s around the mean\n\nLM_I <- localMI[,1] - mean(localMI[,1])\n\nNext, we can set the statistical significance level for the local Moran\n\nsignif <- 0.05\n\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4      \n\n\nquadrant[localMI[,5]>signif] <- 0\n\nCombined everything above into the codechunk below\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\n4.2.4 Plotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-On Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "4.3 Hot Spot and Cold Spot Area Analysis",
    "text": "4.3 Hot Spot and Cold Spot Area Analysis\n\n4.3.1 Getis Ord’s G-Statistics\n\n\n4.3.2 Computing Gi Statistics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Spatial Weights and Application",
    "section": "",
    "text": "Load packages into R\n\npacman::p_load(sf, spdep, tidyverse, knitr, tmap)\n\n\n\n\n\n\n\nhunan <- st_read(dsn = \"data/geospatial/\", \n                 layer= \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below joins hunan and hunan2012 via the left_join() of dplyr package. They are automatically joined by “County”.\n\nhunan <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)\n\n\n\n\n\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() + \n  tm_text(\"NAME_3\", size = 0.5)\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-queen-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-queen-contiguity-based-neighbours",
    "title": "Hands-on Exercise 6: Spatial Weights and Application",
    "section": "2.1 Computing (QUEEN) contiguity based neighbours",
    "text": "2.1 Computing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units, with area unit no. 85 is connected to 11 other area unit.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons and its corresponding links.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors and the numbers represent the polygon IDs.\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nOutput reveals that Polygon ID=1 is Anxiang\nTo reveal the county names of the five neighboring polyons, the code chunk below does that.\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "",
    "text": "1.3 Getting Started\nInstalling and loading R packages\n\npacman::p_load(sf, tidyverse)\n\n1.4.1 Importing Geospatial Data\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n1.4.2 Importing polyline feature data in shapefile\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n1.4.3 Importing GIS data in kml format\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Hands-on_Ex/Hands-on_Ex01/data/geospatial/preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n1.5 Checking the content of a simple feature dataframe\n1.5.1 Working with st_geometry() The function will give you basic information of the feature class.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n1.5.2 Working with glimpse() glimpse showcases the rows and column and their respective data types and values\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n1.5.3 Working with head() Function shows the first n values\n\nhead(mpsz, n = 5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n1.6 Plotting Geospatial Data\n\nplot(mpsz)\n\n\n\n\nChoose to plot only the geometry\n\nplot(st_geometry(mpsz))\n\n\n\n\nChoose to plot a specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n1.7 Working with Projection\n1.7.1 Assigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nEPSG is 9001 which is wrong as it should be 3414. Therefore we need to set EPSG to 3414\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nCheck CSR again\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n1.7.2 Transforming the projection of preschool from wgs84 to svy21\n\nst_geometry(preschool)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nChangge Geodetic CRS: WGS 84 to svy21_EPSG 3414\n\npreschool3414 <- st_transform(preschool, crs = 3414)\npreschool3414\n\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\nescription\n1             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BRILLIANT TOTS PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9334</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>610, JURONG WEST STREET 65, #01 - 534, S 640610</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>640610</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>0523C7904478A63D</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n2             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUBBLESLAND PLAYHOUSE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT7680</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>238, COMPASSVALE WALK, #01 - 542, S 540238</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>540238</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>18BED05A501AA168</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n3       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUCKET HOUSE PRESCHOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9527</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>39, WOODLANDS CLOSE, #01 - 62, MEGA@WOODLANDS, S 737856</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>737856</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C88B9AC31EE71BF6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n4            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUMBLE BEE CHILD CARE CENTRE</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT3150</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>369, WOODLANDS AVENUE 1, #01 - 853, S 730369</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>730369</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>64AB8FACA8F60129</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n5               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9117</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>327B, ANCHORVALE ROAD, #01 - 322, S 542327</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>542327</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>E1B55AC65B9059E8</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n6                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9066</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>211A, PUNGGOL WALK, #01 - 623, S 821211</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>821211</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>3B5A4AF2696592AA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n7       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9479</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>2, GAMBAS CRESCENT,  - 01-03, NORDCOM II, S 757044</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>757044</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>5F5452B568838620</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n8          <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE.LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9127</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>6, SERANGOON NORTH AVENUE 5, #02 - 01, S 554910</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>554910</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>3AD4173BBB057D89</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n9             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE.LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9067</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>348A, YISHUN AVENUE 11, #01 - 557, S 761348</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>761348</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F4D7A4BDA3CBB15F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n10 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CAELUM JUNIOR @ BENDEMEER PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9053</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>70, BENDEMEER ROAD, #02 - 01, LUZERNE, S 339940</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>339940</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>D55FC7583E8CCBA7</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n                        geometry\n1  POINT Z (13258.34 35611.04 0)\n2  POINT Z (35272.09 41373.42 0)\n3  POINT Z (25050.54 46634.14 0)\n4  POINT Z (22892.48 46127.66 0)\n5  POINT Z (34155.79 41949.13 0)\n6   POINT Z (35414.54 42625.1 0)\n7  POINT Z (26046.98 47205.62 0)\n8  POINT Z (31980.09 39607.05 0)\n9  POINT Z (28879.22 45454.97 0)\n10 POINT Z (31250.89 33171.55 0)\n\n\n1.8 Importing and Converting an Aspatial data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\n#Imports into a tibble data frame\nlist(listings)\n\n[[1]]\n# A tibble: 3,037 × 75\n       id listing_url    scrap…¹ last_scr…² source name  descr…³ neigh…⁴ pictu…⁵\n    <dbl> <chr>            <dbl> <date>     <chr>  <chr> <chr>   <chr>   <chr>  \n 1  71609 https://www.a… 2.02e13 2022-12-29 city … Ensu… For 3 … <NA>    https:…\n 2  71896 https://www.a… 2.02e13 2022-12-29 city … B&B … <b>The… <NA>    https:…\n 3  71903 https://www.a… 2.02e13 2022-12-29 city … Room… Like y… Quiet … https:…\n 4 275343 https://www.a… 2.02e13 2022-12-29 city … Amaz… Awesom… <NA>    https:…\n 5 275344 https://www.a… 2.02e13 2022-12-29 city … 15 m… Lovely… Bus st… https:…\n 6 289234 https://www.a… 2.02e13 2022-12-29 city … Book… This w… A quie… https:…\n 7 294281 https://www.a… 2.02e13 2022-12-29 city … 5 mi… I have… <NA>    https:…\n 8 324945 https://www.a… 2.02e13 2022-12-29 city … Cozy… Cozy, … <NA>    https:…\n 9 330089 https://www.a… 2.02e13 2022-12-29 city … Cozy… A unit… <NA>    https:…\n10 330095 https://www.a… 2.02e13 2022-12-29 city … 10 m… Cosy, … Near I… https:…\n# … with 3,027 more rows, 66 more variables: host_id <dbl>, host_url <chr>,\n#   host_name <chr>, host_since <date>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <lgl>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <dbl>, host_total_listings_count <dbl>,\n#   host_verifications <chr>, host_has_profile_pic <lgl>, …\n\n\n1.8.2 Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs = 4326) |>\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,037\nColumns: 74\n$ id                                           <dbl> 71609, 71896, 71903, 2753…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022123e+13, 2.022123e+1…\n$ last_scraped                                 <date> 2022-12-29, 2022-12-29, …\n$ source                                       <chr> \"city scrape\", \"city scra…\n$ name                                         <chr> \"Ensuite Room (Room 1 & 2…\n$ description                                  <chr> \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        <chr> NA, NA, \"Quiet and view o…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 367042, 367042, 367042, 1…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2011-01-29, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"Hi My name is Belinda -H…\n$ host_response_time                           <chr> \"within a few hours\", \"wi…\n$ host_response_rate                           <chr> \"90%\", \"90%\", \"90%\", \"100…\n$ host_acceptance_rate                         <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          <dbl> 6, 6, 6, 46, 46, 6, 7, 46…\n$ host_total_listings_count                    <dbl> 15, 15, 15, 59, 59, 15, 8…\n$ host_verifications                           <chr> \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       <chr> \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 <chr> \"East Region\", \"East Regi…\n$ property_type                                <chr> \"Private room in villa\", …\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 6, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 private bath\", \"Shared…\n$ bedrooms                                     <dbl> 2, 1, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <dbl> 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Cooking basics\\\", \\\"R…\n$ price                                        <chr> \"$46,437.00\", \"$81.00\", \"…\n$ minimum_nights                               <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               <dbl> 1125, 1125, 1125, 999, 99…\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       <dbl> 1125, 1125, 1125, 999, 99…\n$ maximum_maximum_nights                       <dbl> 1125, 1125, 1125, 999, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 1125, 1125, 1125, 999, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 0, 0, 30, 0, 0, 0, 30, 0,…\n$ availability_60                              <dbl> 0, 0, 33, 0, 0, 0, 60, 0,…\n$ availability_90                              <dbl> 0, 0, 33, 0, 6, 0, 90, 0,…\n$ availability_365                             <dbl> 242, 242, 305, 273, 281, …\n$ calendar_last_scraped                        <date> 2022-12-29, 2022-12-29, …\n$ number_of_reviews                            <dbl> 20, 24, 47, 22, 14, 12, 1…\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 2, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <date> 2011-12-19, 2011-07-30, …\n$ last_review                                  <date> 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         <dbl> 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       <dbl> 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    <dbl> 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        <dbl> 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  <dbl> 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       <dbl> 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          <dbl> 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      <chr> NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             <lgl> FALSE, TRUE, FALSE, FALSE…\n$ calculated_host_listings_count               <dbl> 6, 6, 6, 46, 46, 6, 7, 46…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 2, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <dbl> 6, 6, 6, 44, 44, 6, 6, 44…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.15, 0.17, 0.33, 0.19, 0…\n$ geometry                                     <POINT [m]> POINT (41972.5 3639…\n\n\n1.9 Geoprocessing with sf package\n1.9.1 Buffering Scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nSolution:\nFirstly, st_buffer() is used to compute the 5 meter buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30) \n\nThen calculate the area of buffers\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly sum() is used to rerive total land involved\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n1.9.2 Point-in-polygon count Scenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nSolution: Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414)) \n\nShow the summary statistics\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nShow the planning subzone with the most number of school\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nFind the density\n\nmpsz3414$Area <- mpsz3414 |>\n  st_area()\n\nmpsz3414 <- mpsz3414 |>\n  mutate(`PreSch Density` = `PreSch Count`/Area *1000000)\n\nmpsz3414\n\nSimple feature collection with 323 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            5\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            4\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            2\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           10\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...            4\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...            2\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...            6\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...            1\n              Area   PreSch Density\n1  1630379.3 [m^2] 0.000000 [1/m^2]\n2   559816.2 [m^2] 8.931502 [1/m^2]\n3   160807.5 [m^2] 0.000000 [1/m^2]\n4   595428.9 [m^2] 6.717847 [1/m^2]\n5   387429.4 [m^2] 5.162230 [1/m^2]\n6  1030378.8 [m^2] 9.705169 [1/m^2]\n7   551732.0 [m^2] 7.249896 [1/m^2]\n8   290184.7 [m^2] 6.892163 [1/m^2]\n9  1084792.3 [m^2] 5.531013 [1/m^2]\n10  631644.3 [m^2] 1.583170 [1/m^2]\n\n\n1.10 Exploratory Data Analysis\nCreate a histogram\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nUsing ggplot2\n\nmpsz3414 |>\n  ggplot(aes(x = as.numeric(`PreSch Density`))) + \n  geom_histogram(bins=20,color=\"black\",fill = \"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore\",\n       subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\", \n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\nUsing ggplot for scatterplot\n\nmpsz3414 |>\n  ggplot(aes(x = as.numeric(`PreSch Density`), y = `PreSch Count`)) + \n  geom_point(color=\"black\",fill = \"light blue\") +\n  xlim(0,40) +\n  ylim(0,40) +\n  labs(title = \"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jun Hao’s IS415-GAA Coursework",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications\nThis is the course website of IS415 I study this term. you will find my course work on this website."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Self-Introduction\n\n\n\n\n\nHi guys! I am Jun Hao, a second year SMU student, majoring in\nQuantitative Economics and Data Science Analytics.\nA hobby of mine is rock climbing and I have a SNCS Level 2 Certification.\nFun Fact: I’m still afraid of heights\n\n\nPurpose of Webpage\nThis webpage showcases the work I have done for IS415: Geospatial Analytics and Applications!\n\nHands On Exercises\nIn class Exercises\nTake Home Assignments\n\n\n\nContact\nI can be contacted via email: junhao.teo.2021@economics.smu.edu.sg, linkedin or my tele, @JHTeo23!"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\nThe data we will be using here are:\n\nAspatial Data\n\nWPdx Global Data Repositories: WPdx+ data set\n\nGeospatial Data\n\nState Boundary GIS: geoBoundaries data set\n\nPopulation Data\n\nhttp://www.geo-ref.net/ph/nga.htm"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#load-geospatial-data-in",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#load-geospatial-data-in",
    "title": "Take Home Exercise 1",
    "section": "3.1 Load Geospatial data in",
    "text": "3.1 Load Geospatial data in\nst_read() from sf package is used to read the geospatial data\n\ngeoNGA2 <- st_read(dsn = \"data/geospatial\", layer = \"nga_admbnda_adm2_osgof_20190417\")\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Take-Home_Ex/Take-Home_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#load-aspatial-data-in",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#load-aspatial-data-in",
    "title": "Take Home Exercise 1",
    "section": "3.2 Load Aspatial Data in",
    "text": "3.2 Load Aspatial Data in\nread_csv() from the tidyverse package is used to read csv type files. The data is then filtered to the studyArea, “Osun”. This is done by using filter() from the dplyr package.\n\nwp_nga <- read_csv(\"data/aspatial/WPDX.csv\") %>%\n  filter(`#clean_adm1` ==\"Osun\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#geospatial-data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#geospatial-data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "4.1 Geospatial Data wrangling",
    "text": "4.1 Geospatial Data wrangling\n\n4.1.1 Check and Amend duplicates\nWe have to check the data for any duplicated names. After checking, there are several duplicates and thus we get their indices out and replace them with the corresponding names.\n\ngeoNGA2$ADM2_EN[duplicated(geoNGA2$ADM2_EN) == TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n\nduplicated_LGA <- geoNGA2$shapeName[duplicated(geoNGA2$shapeName) == TRUE]\n\n# Get all the indices with names that are included in the duplicated LGA names\nduplicated_indices <- which(geoNGA2$shapeName %in% duplicated_LGA)\n\ngeoNGA2$ADM2_EN[94] <- \"Bassa, Kogi\"\ngeoNGA2$ADM2_EN[95] <- \"Bassa, Plateau\"\ngeoNGA2$ADM2_EN[304] <- \"Ifelodun, Kwara\"\ngeoNGA2$ADM2_EN[305] <- \"Ifelodun, Osun\"\ngeoNGA2$ADM2_EN[355] <- \"Irepodun, Kwara\"\ngeoNGA2$ADM2_EN[356] <- \"Irepodun, Osun\"\ngeoNGA2$ADM2_EN[519] <- \"Nasarawa, Kano\"\ngeoNGA2$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\ngeoNGA2$ADM2_EN[546] <- \"Obi, Benue\"\ngeoNGA2$ADM2_EN[547] <- \"Obi, Nasarawa\"\ngeoNGA2$ADM2_EN[693] <- \"Surulere, Lagos\"\ngeoNGA2$ADM2_EN[694] <- \"Surulere, Oyo\"\n\nThe code chunk below filters out geoNGA2 into Osun state Local Government Area\n\nosun_LGA <- c(\"Aiyedade\",\"Aiyedire\",\"Atakumosa East\",   \"Atakumosa West\",   \n              \"Ede North\",  \"Ede South\",    \"Egbedore\", \"Ejigbo\",   \"Ife Central\",  \n              \"Ife East\",   \"Ife North\",    \"Ife South\",    \"Ifedayo\",  \"Ila\",\n              \"Ifelodun, Osun\",\"Irepodun, Osun\",\"Ilesha East\",  \"Ilesha West\",\n              \"Irewole\",    \"Isokan\",   \"Iwo\",  \"Obokun\",   \"Odo-Otin\", \"Ola-oluwa\",    \n              \"Olorunda\",   \"Oriade\",   \"Orolu\",    \"Osogbo\", \"Boripe\", \"Boluwaduro\")\nosun <- geoNGA2 %>%\n  filter(ADM2_EN %in% osun_LGA)\n\n\n\n4.1.2 Changing Projection System\nWe will use st_crs() from the sf package to check the crs of osun\n\nst_crs(osun)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nWe can see that currently geoNGA2 is in the projected coordinate systems, EPSG:4326. We have to convert it to Nigeria’s Projected Coordinate System, 26392 by using st_transform() from the sf package. The code chunk below transforms the data to crs = 26392.\n\nosun <- osun %>%\n  st_transform(crs = 26392)\n\n\n\n4.1.3 Plot Geospatial Data\n\nplot(osun)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#aspatial-data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#aspatial-data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "4.2 Aspatial Data wrangling",
    "text": "4.2 Aspatial Data wrangling\n\n4.2.1 Create simple feature on wp_nga\nUsing what we learn on Hands-on Exercise 1, we can create a simple feature using st_as_sf() from the sf package. We have to ensure that the file follows the same crs and therefore we use st_transform again to convert it into crs = 26392.\n\nwp_nga_sf <- st_as_sf(wp_nga, coords = c(\"#lon_deg\", \"#lat_deg\"), crs = 4326) %>%\n  st_transform(crs = 26392)\n\n\n\n4.2.2 Cleaning up NA entries in aspatial data\nBy using the functions in the dplyr package, we can use rename() to rename #status_clean to status_clean, select() to pick the required column variable and replace_na() for replacing NA to unknown.\n\nwp_nga_sf <- wp_nga_sf %>%\n  rename(status_clean = `#status_clean`) %>% \n  dplyr::select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n\n4.2.3 Filter out functional and non-functional data\nBy using filter() from the dplyr package, we can filter out entries with functional and non-functional water points.\n\nwp_functional <- wp_nga_sf %>%\n    filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nwp_nonfunctional <- wp_nga_sf %>%\n  filter(status_clean %in% \n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#population-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#population-data",
    "title": "Take Home Exercise 1",
    "section": "4.3 Population Data",
    "text": "4.3 Population Data\nWe will load in the population density data of Nigeria. This data will be illustrated in the later sections to show a comparison between population density and the location of the water points.\n\nData\n\nhttp://www.geo-ref.net/ph/nga.htm\n\n\n\n4.3.1 Load Data in and filter relevant rows to Study Area\n\nnga_pop <- read_csv(\"data/pop_data_nga.csv\")\n  \nosun_pop <- nga_pop %>% \n  filter(nga_pop$`State    ` == \"Osun\") %>%\n  rename(ADM2_EN = `Local gov. area▲`, \n         HASC = `HASC    `,\n         Capital = `Capital     `, \n         Population = `Population    `)\n\n\n\n4.3.2 Ensure names match with osun object\n\nosun_pop[1,1] <- \"Aiyedade\"\nosun_pop[3,1] <- \"Atakumosa East\"\nosun_pop[4,1] <- \"Atakumosa West\"\nosun_pop[20,1] <- \"Irepodun, Osun\"\nosun_pop[16,1] <- \"Ifelodun, Osun\"\n\nOnce names have matched, we can merge the tibble as one dataframe\n\nosun_pop_density <- osun %>%\n  left_join(osun_pop, by = \"ADM2_EN\")\n\nWe can then have the population density of Osun by its local government areas (LGA). The code chunk below will generate the plot. Further down, we will discuss why having a population density mapping is important in formulating our hypothesis claim.\nThe code chunk below will display the cartographic map using the tmap package.\n\ntmap_mode(\"plot\")\n\ntm_shape(osun_pop_density) +\n  tm_fill(\"Density\",\n          n = 8,\n          style = \"quantile\",\n          palette = \"-Blues\",\n          title = \"Population Density\") +\n  tm_layout(main.title = \"Population Density of Osun LGA\",\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\ntm_shape(wp_functional) +\n  tm_dots(col=\"green\",\n          size=0.01,\n          border.col=\"black\",\n           border.lwd=0.5,\n          alpha=0.5)+\n  tm_credits(\"Source: http://www.geo-ref.net/ph/nga.htm\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntm_shape(osun_pop_density) +\n  tm_fill(\"Density\",\n          n = 8,\n          style = \"quantile\",\n          palette = \"-Blues\",\n          title = \"Population Density\") +\n  tm_layout(main.title = \"Population Density of Osun LGA\",\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_shape(wp_nonfunctional) +\n  tm_dots(col=\"red\",\n          size=0.01,\n          border.col=\"black\",\n           border.lwd=0.5,\n          alpha=0.5)+\n  tm_credits(\"Source: http://www.geo-ref.net/ph/nga.htm\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-object-to-relevant-datatype",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-object-to-relevant-datatype",
    "title": "Take Home Exercise 1",
    "section": "5.1 Converting object to relevant datatype",
    "text": "5.1 Converting object to relevant datatype\nWe have to convert sf to sp then to ppp so that it is readable by the spatstat package\nThe code chunks in this section are using as() from the sf package to convert objects to their respective Spatial class.\n\n5.1.1 Convert sf to sp Spatial class\n\nosun_spatial <- as(osun, \"Spatial\")\n\nwp_functional_spatial <- as(wp_functional, \"Spatial\")\nwp_nonfunctional_spatial <- as(wp_nonfunctional, \"Spatial\")\n\n\n\n5.1.2 Converting the Spatial point data frame into generic SP format\n\nosun_sp <- as(osun_spatial, \"SpatialPolygons\")\n\nwp_func_sp <- as(wp_functional_spatial, \"SpatialPoints\")\n\nwp_nonfunc_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\n\n\n\n5.1.3 Convert sp to spatstat ppp format\n\nwp_func_ppp <- as(wp_func_sp, \"ppp\")\nwp_nonfunc_ppp <- as(wp_nonfunc_sp, \"ppp\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-owin-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-owin-object",
    "title": "Take Home Exercise 1",
    "section": "5.2 Create owin object",
    "text": "5.2 Create owin object\n\nosun_owin <- as(osun_sp, \"owin\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#combine-waterpoints-and-study-area-together",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#combine-waterpoints-and-study-area-together",
    "title": "Take Home Exercise 1",
    "section": "5.3 Combine waterpoints and study area together",
    "text": "5.3 Combine waterpoints and study area together\n\nosun_wpfunc <- wp_func_ppp[osun_owin]\n\nosun_wpnonfunc <- wp_nonfunc_ppp[osun_owin]"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#rescaling-to-km",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#rescaling-to-km",
    "title": "Take Home Exercise 1",
    "section": "5.4 Rescaling to “km",
    "text": "5.4 Rescaling to “km\nBefore we go on to calculate the kernal density, we should rescale the data as taught in Hands-on Ex 4 Chapter 5.\n\nosun_wpfunc_km <- rescale(osun_wpfunc, 1000, \"km\")\n\nosun_wpnonfunc_km <- rescale(osun_wpnonfunc, 1000, \"km\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-kernal-density-estimate",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-kernal-density-estimate",
    "title": "Take Home Exercise 1",
    "section": "5.5 Creating Kernal Density Estimate",
    "text": "5.5 Creating Kernal Density Estimate\n\nkde_func<-density(osun_wpfunc_km,\n                  sigma=bw.diggle,\n                  edge=TRUE,\n                  kernel=\"gaussian\")\n\nkde_nonfunc <- density(osun_wpnonfunc_km,\n                       sigma=bw.diggle,\n                       edge= TRUE,\n                       kernel = \"gaussian\")\n\npar(mfrow = c(1,2))\nplot(kde_func, main = \"Functional Water Points\")\nplot(kde_nonfunc, main = \"Non-Functional Water Points\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#convert-kde-output-into-gridded-objects",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#convert-kde-output-into-gridded-objects",
    "title": "Take Home Exercise 1",
    "section": "5.6 Convert KDE output into gridded objects",
    "text": "5.6 Convert KDE output into gridded objects\nFor mapping purposes, we can convert the KDE output into a grid object. To do so, we can use as.SpatialGridDataFrame.im() from maptools package.\n\ngridded_osun_wp <- as.SpatialGridDataFrame.im(kde_func)\ngridded_osun_nwp <-as.SpatialGridDataFrame.im(kde_nonfunc)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#convert-gridded-object-into-raster",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#convert-gridded-object-into-raster",
    "title": "Take Home Exercise 1",
    "section": "5.7 Convert gridded object into raster",
    "text": "5.7 Convert gridded object into raster\nAfter converting the KDE output into a gridded object, we can use raster() from the raster package to then convert it into raster.\n\nosun_wp_raster <- raster(gridded_osun_wp)\nosun_nwp_raster <- raster(gridded_osun_nwp)\n\nosun_wp_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.734822e-15, 25.49435  (min, max)\n\nosun_nwp_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.082312e-15, 20.49412  (min, max)\n\n\nThe output of the above code chunk shows that crs in both raster object is NA. We have to input the the Projected Coordinate System of Nigeria (crs = 26392) and ensure the measurements are in “km”.\nThis is done via the code chunk below.\n\nprojection(osun_wp_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(osun_nwp_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n\nosun_wp_raster ; osun_nwp_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +units=km \nsource     : memory\nnames      : v \nvalues     : -4.734822e-15, 25.49435  (min, max)\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +units=km \nsource     : memory\nnames      : v \nvalues     : -4.082312e-15, 20.49412  (min, max)\n\n\nNow, we can see that the crs has been inputted in."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualising-the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualising-the-data",
    "title": "Take Home Exercise 1",
    "section": "5.8 Visualising the data",
    "text": "5.8 Visualising the data\nThe code chunk below visualizes the raster onto the OpenStreetMap layout and by setting the zoom.limits to 9 and 14, it fixes the zoom limits of the map.\n\ntmap_mode(\"view\") \ntm_basemap(server =\"OpenStreetMap\") + \n  tm_shape(osun_wp_raster) + \n  tm_raster(\"v\") +\n  tm_layout(title = \"Functional Waterpoints Density\", \n            legend.position = c(\"right\", \"Top\"), \n            frame = FALSE) +\n  tm_view(set.zoom.limits =c(9,14))\n\n\n\n\n\n\ntmap_mode(\"view\") \ntm_basemap(server =\"OpenStreetMap\") + \n  tm_shape(osun_nwp_raster) + \n  tm_raster(\"v\") + \n  tm_layout(title = \"Non-Functional Waterpoints Density\", \n            legend.position = c(\"right\", \"Bottom\"), \n            frame = FALSE) +\n  tm_view(set.zoom.limits =c(9,14))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#advantages-of-kernal-density-map-over-point-map",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#advantages-of-kernal-density-map-over-point-map",
    "title": "Take Home Exercise 1",
    "section": "5.9 Advantages of Kernal Density Map over Point Map",
    "text": "5.9 Advantages of Kernal Density Map over Point Map\nThe advantage of Kernal Density Map is that it clearly shows the intensity of clustering at various points of the map. As compared to a point map, we may be able to identify clustering but to be comparing clusters might prove difficult to the human eye."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#g-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#g-function",
    "title": "Take Home Exercise 1",
    "section": "6.1 G-function",
    "text": "6.1 G-function\nThe nearest-neighbour distance is the measure of the distance between a point and its closest neighboring point.\nGest() of spatstat package is used to compute the G function\n\nG_FWP <- Gest(osun_wpfunc, correction = \"border\")\nG_NFWP <- Gest(osun_wpnonfunc, correction = \"border\")\npar(mfrow = c(1,2))\nplot(G_FWP, xlim = c(0,500)) ; plot(G_NFWP, xlim = c(0,500))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#f-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#f-function",
    "title": "Take Home Exercise 1",
    "section": "6.2 F function",
    "text": "6.2 F function\nUnlike the G function, the F function in Fest() is used to measure the distribution of nearest neighbour distances. The code chunk below showcases this:\n\n# Functional Water Point\nF_FWP<- Fest(osun_wpfunc)\nplot(F_FWP) \n\n\n\n\n\n# Non-Functional WaterPoints\nF_NFWP <- Fest(osun_wpnonfunc)\nplot(F_NFWP)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#l-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#l-function",
    "title": "Take Home Exercise 1",
    "section": "6.3 L Function",
    "text": "6.3 L Function\nThe L can be obtained via the K function. Sometimes, due to the closeness of K and K(expected), it may be hard to see differences. When such an issue occur, L makes it easier to interpret the result.\nBelow is the transformation of K to L function:\n\n\nL_FWP <- Lest(osun_wpfunc, correction = \"Ripley\")\nplot(L_FWP, .-r ~r, ylab=\"L(d)-r\", xlab =\"d(m)\")\n\n\n\nL_NFWP <- Lest(osun_wpnonfunc, correction = \"Ripley\")\nplot(L_NFWP, .-r ~r, ylab=\"L(d)-r\", xlab =\"d(m)\")\n\n\nFrom the two plots above, we can see that L line is above the L(pois) and thus this indicates clustering. As L line is well above 0 for all distance value, we can say that both functional and non-functional are clustered. As L function is the transformation of K, it is likely to see a very distinct difference between the K and K(expected), whereby K>K(expected) indicates clustering. You can check it out yourself using the code chunk below.\n\nKest_FWP <- Kest(osun_wpfunc, correction = \"Ripley\")\nplot(Kest_FWP)\n\nAdditional Notes (Not relating to the plot):\nIf the L line < 0, it would mean that there is dispersion."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#performing-complete-spatial-randomness-test",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#performing-complete-spatial-randomness-test",
    "title": "Take Home Exercise 1",
    "section": "6.4 Performing Complete Spatial Randomness Test",
    "text": "6.4 Performing Complete Spatial Randomness Test\nFor the purpose of performing the Complete Spatial Randomness Test, we will be using the L_function. we will be using envelope() from spatstat to run our simulation.\nThe null and alternative hypothesis are:\nHo : The distribution of functional waterpoints in Osun State are randomly distributed\nH1 : The distribution of functional waterpoints in Osun State are not randomly distributed\nWe will use the 95% confidence level in our test.\nThe null hypothesis will be rejected if p-value is smaller than the alpha value, 0.05.\n\nL_FWP_test <- envelope(osun_wpfunc, Lest, nsim = 39, rank = 1, glocal= TRUE)\n\nplot(L_FWP_test, xlim = c(0,500))\n\n\n\nL_NFWP_test <- envelope(osun_wpnonfunc, Lest, nsim = 39, rank = 1, glocal= TRUE)\n\nplot(L_NFWP_test, xlim = c(0,500))\n\n\n\n6.4.1 Spatial Point Pattern Analysis Conclusion\nSimulation shows that the black line is outside the 95% Confidence interval for all values of r. We can thus reject the null hypothesis for all values of r.\nThis makes sense as we’ve put together population density with the dot plots of where the functional water points are at. From the population density map, we can see clustering of functional waterpoints on the more densely populated local government areas. A more densely populated region would have a greater need and usage of water and the L function helps to ascertain this claim. This is also evident in the non-functional point as well. As to why there are large clusters of non-functional in densely populated regions, one possible reason could be the inability to match number of usage to its maintenance work. However, more data would be required to ascertain this fact."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-multipoint-ppp",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-multipoint-ppp",
    "title": "Take Home Exercise 1",
    "section": "7.1 Creating multipoint ppp",
    "text": "7.1 Creating multipoint ppp\nWe can set the categorical value as functional and non-functional. We standardize this as within the dataset, there are too many different types of categories.\nThe code chunk below replaces all values in status_clean as “Functional” and “Non-Functional” in their respective sf.\n\nwp_functional$status_clean[1:length(wp_functional$status_clean)] <- \"Functional\"\nwp_nonfunctional$status_clean[1:length(wp_nonfunctional$status_clean)] <- \"Non-Functional\"\n\nAfterwhich, we can combine them together by using bind_rows from dplyr package.\n\nwp_combined <- bind_rows(wp_functional, wp_nonfunctional)\nwp_combined\n\nSimple feature collection with 4809 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 340054.1 xmax: 290751 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 4,809 × 2\n   status_clean            geometry\n * <chr>                <POINT [m]>\n 1 Functional     (212810 386707.6)\n 2 Functional   (228798.9 403822.5)\n 3 Functional   (270497.9 377476.9)\n 4 Functional     (212202 349210.1)\n 5 Functional   (259331.9 399591.4)\n 6 Functional     (195484 404733.2)\n 7 Functional   (221302.3 389473.6)\n 8 Functional   (263254.1 382692.9)\n 9 Functional     (192484.1 405113)\n10 Functional       (252736 373593)\n# … with 4,799 more rows\n\n\nObserve that status_clean is a chr type. We have to convert that into a factor type. The reason for this is because a factor is a variable used to categorize and store data. This is necessary when doing multi-point correlation analysis.\nUse base R as.factor() to convert the variable type.\n\nwp_combined$status_clean <- as.factor(wp_combined$status_clean)\nwp_combined\n\nSimple feature collection with 4809 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 340054.1 xmax: 290751 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 4,809 × 2\n   status_clean            geometry\n * <fct>                <POINT [m]>\n 1 Functional     (212810 386707.6)\n 2 Functional   (228798.9 403822.5)\n 3 Functional   (270497.9 377476.9)\n 4 Functional     (212202 349210.1)\n 5 Functional   (259331.9 399591.4)\n 6 Functional     (195484 404733.2)\n 7 Functional   (221302.3 389473.6)\n 8 Functional   (263254.1 382692.9)\n 9 Functional     (192484.1 405113)\n10 Functional       (252736 373593)\n# … with 4,799 more rows\n\n\nNow we have status_clean as a factor, with categorical values, “Functional” and “Non-Functional”."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#conversion-of-object-type",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#conversion-of-object-type",
    "title": "Take Home Exercise 1",
    "section": "7.2 Conversion of object type",
    "text": "7.2 Conversion of object type\nSame steps that were applied in Kernel Density Analysis are applied here.\n\n7.2.1 Convert sf to sp\n\nwp_combined_sp <- as(wp_combined, \"Spatial\")\n\n\n\n7.2.2 Convert sp to Spatial Points DF\n\nwp_combined_spdf <- as(wp_combined_sp, \"SpatialPointsDataFrame\")\n\n\n\n7.2.3 Convert Spatial Points DF to ppp\n\nwp_combined_ppp <- as(wp_combined_spdf, \"ppp\")\n\n\n\n7.2.4 Combine waterpoints and owin object\n\nwp_combined_owinppp <- wp_combined_ppp[osun_owin]\n\n\n\n7.2.5 Visualizing the data\n\nplot(wp_combined_owinppp, main = \"WaterPoints by Category\", which.marks = \"status_clean\")\n\n\n\n\nFrom the Second-Order Spatial Point Pattern analysis above, we can say that both functional and non-functional water points are not randomly distributed. From here, we would like to find out whether functional and non-functional water points are dependent on each other. Hence, by performing a hypothesis testing, we can find out whether there is spatial dependence between these two categories.\nThe null and alternative hypothesis are:\nHo : The distribution of functional and non-functional water points in Osun State are independent from each other.\nH1 : The distribution of functional and non-functional water points in Osun State are not independent from each other.\nWe will use the 95% confidence level in our test.\nThe null hypothesis will be rejected if p-value is smaller than the alpha value, 0.05.\n\n\n7.2.6 Cross L-Function Analysis\n\nLcross_wp <- envelope(wp_combined_owinppp,\n                      Lcross,\n                      i = \"Functional\",\n                      j = \"Non-Functional\",\n                      correction = \"border\",\n                      nsim = 39)\nplot(Lcross_wp, xlim = c(0,10000))\n\n\n\n\n7.2.7 Cross L Statistical Conclusion\nReferring to the plot above, we can clearly see that 0 < r < 5500 and r > 6800, there is spatial dependence between the two types of waterpoints. At these values, the result is statistically significant as it is outside the 95% confidence interval, which is the grey envelope.\nAs for 5500 < r < 6800, the L(obs) is within the 95% confidence interval and thus there is spatial independence."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#local-colocation-quotients-lclq",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#local-colocation-quotients-lclq",
    "title": "Take Home Exercise 1",
    "section": "7.3 Local Colocation Quotients (LCLQ)",
    "text": "7.3 Local Colocation Quotients (LCLQ)\n\n7.3.1 Preparing nearest neighbours list\nst_knn() is used to determine the 6 nearest neighbours for a given point geometry. include_self() is used to include the region itself in its own list of neighbours. Both functions are from sfdep package.\n\nnb <- include_self(\n  st_knn(st_geometry(wp_nga_sf),6))\n\nAfterwhich, we will use st_kernel_weights() of sfdep package to derive a weights list by using a kernal function. We will be using the gaussian method and the mathematical equations is:\nKernel function:\n\nWeighted average:\n\n\n\n7.3.2 Computing the Kernel weights\n\nwt <- st_kernel_weights(nb,\n                        wp_nga_sf,\n                        \"gaussian\",\n                        adaptive = TRUE)\n\nThe codechunk below categorises all values in wp_functional and wp_nonfunctional to be under one categorical value “Functional” and “Non-Functional” respectively.\n\nwp_functional$status_clean[1:length(wp_functional$status_clean)] <- \"Functional\"\nwp_nonfunctional$status_clean[1:length(wp_nonfunctional$status_clean)] <- \"Non-Functional\"\n\n\n\n7.3.3 Calculating Local Colocation Quotient\nWe can then separate out the area of interest, A as Functional and neighbours, B as Non-functional. By using local_colocation() from the sfdep package, we can obtain two new fields under LCLQ, the local colocation quotient and the corresponding p-value.\nLCLQ:\n\n\nA <- wp_functional$status_clean\n\nB <- wp_nonfunctional$status_clean\n\nLCLQ <- local_colocation(A,B, nb, wt, 39)\n\nWe would then need to join LCLQ with the water point simple feature dataframe.\n\nLCLQ_wp <- cbind(wp_nga_sf, LCLQ) %>%\n  na.exclude()\n\n\n\n7.3.4 Visualizing the Local Colocation Points\n\ntmap_mode(\"view\")\ntm_shape(osun) +\n  tm_polygons() +\ntm_shape(LCLQ_wp) +\n  tm_dots(col = \"Non.Functional\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\ntm_shape(LCLQ_wp) +\n  tm_dots(col = \"p_sim_Non.Functional\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)\n\n\n\n\n\n\n\nhead(LCLQ_wp, 5)\n\nSimple feature collection with 5 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 221313 ymin: 385885.5 xmax: 234473.1 ymax: 415812.3\nProjected CRS: Minna / Nigeria Mid Belt\n    status_clean Non.Functional p_sim_Non.Functional                  geometry\n63    Functional      0.9995411                0.025 POINT (231125.9 393750.4)\n118   Functional      0.9995411                0.025 POINT (222265.4 415305.4)\n119   Functional      0.9995411                0.025 POINT (231020.5 415812.3)\n149   Functional      0.9995411                0.025 POINT (234473.1 385885.5)\n263   Functional      0.9995411                0.050   POINT (221313 415050.5)\n\n\n\n\n7.3.5 LCLQ Statistical Conclusion\nFrom what we learn in in-class exercise 5,\n\nIf LCLQ > 1, the proportion of B points within the neighborhood of A is more than the global proportion of B.\nIf LCLQ < 1, the proportion of B points within the neighborhood of A is less than the global proportion of B\nIf LCLQ = 1, the proportion of B points within the neighborhood of A is equal to the global proportion of B\n\nDue to rounding, the graph shows Non.Functional local colocation quotient is 1 when it is slightly lower. The above code chunk outputs the first 5rows of LCLQ_wp. Since local colocation quotient is relatively equal to 1, it means the proportion of categories within their neighborhood is a good representation of the proportion of categories throughout the entire study area. Since p-value is less than 0.05, we can say that the result is statistically significant."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "1 Task\nChoropleth Mapping and Analysis Compute the monthly vaccination rate from July 2021 to June 2022 at sub-district (also known as kelurahan in Bahasa Indonesia) level, Prepare the monthly vaccination rate maps by using appropriate tmap functions, Describe the spatial patterns revealed by the choropleth maps (not more than 200 words). Local Gi* Analysis With reference to the vaccination rate maps prepared in ESDA:\nCompute local Gi* values of the monthly vaccination rate, Display the Gi* maps of the monthly vaccination rate. The maps should only display the significant (i.e. p-value < 0.05) With reference to the analysis results, draw statistical conclusions (not more than 250 words). Emerging Hot Spot Analysis(EHSA) With reference to the local Gi* values of the vaccination rate maps prepared in the previous section:\nPerform Mann-Kendall Test by using the spatio-temporal local Gi* values, Select three sub-districts and describe the temporal trends revealed (not more than 250 words), and Prepared a EHSA map of the Gi* values of vaccination rate. The maps should only display the significant (i.e. p-value < 0.05). With reference to the EHSA map prepared, describe the spatial patterns revelaed. (not more than 250 words).\n\n\n2 Load packages\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, sfdep, maptools,readxl)\n\n\n\n3 Load Data in\n\ngeoJAR <- st_read(dsn = \"data/geospatial/\",\n                  layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")                                        \n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/Take-Home_Ex/Take-Home_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\n\n\n4 Load Aspatial\n\ndf<- list()\nlist <- list.files(path = \"data/aspatial/\", pattern = \"*.xlsx\")\nsetwd(\"data/aspatial/\")\nfor (i in 1:length(list)){\n  \n  df[i] <- lapply(list[i], FUN= read_excel)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In Class Exercise 3: Analytical Mapping",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution-of-non-functional-water-point",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution-of-non-functional-water-point",
    "title": "In Class Exercise 3: Analytical Mapping",
    "section": "2.1 Visualising distribution of non-functional Water Point",
    "text": "2.1 Visualising distribution of non-functional Water Point\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\", \n          n= 10,\n          style = \"equal\",\n          palette =\"Blues\") +\n  tm_borders(lwd = 0.1, \n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water\",\n            legend.outside = FALSE)\n\n# n = 10 indicates 10 range of colors\n# style = equal indicates the distribution of data, in this case, equal refers to equal difference per range as per seen in the plot\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\", \n          n= 10,\n          style = \"equal\",\n          palette =\"Blues\") +\n  tm_borders(lwd = 0.1, \n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water point\",\n            legend.outside = FALSE)\n\nArrange both maps into 1 visualisation\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#deriving-proportion-of-functional-water-points-and-non-functional-waterpoints",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#deriving-proportion-of-functional-water-points-and-non-functional-waterpoints",
    "title": "In Class Exercise 3: Analytical Mapping",
    "section": "3.1 Deriving Proportion of Functional Water Points and Non-Functional WaterPoints",
    "text": "3.1 Deriving Proportion of Functional Water Points and Non-Functional WaterPoints\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_non_functional = wp_nonfunctional/total_wp)\n\n\np3 <- tm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd= 0.1, \n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of Proportion of\\nFunctional WaterPoints\",\n            legend.outside = FALSE)\n\np4 <- tm_shape(NGA_wp) +\n  tm_fill(\"pct_non_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd= 0.1, \n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of Proportion of\\nNon_Functional WaterPoints\",\n            legend.outside = FALSE)\n\ntmap_arrange(p4, p3, nrow = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "title": "In Class Exercise 3: Analytical Mapping",
    "section": "4.1 Percentile Map",
    "text": "4.1 Percentile Map\nStep 1: Exclude records with NA\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nStep 2: Creating customised classification\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n        0%         1%        10%        50%        90%        99%       100% \n0.00000000 0.01818182 0.18181818 0.41666667 0.76086957 1.00000000 1.00000000 \n\n# NULL forces NGA_wp[\"pct_functional\"] into var (dataframe)\n\n\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle = \"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) + \n    tm_polygons() + \n    tm_shape(df) +\n    tm_fill(vnam,\n            title = legtitle,\n            breaks=bperc,\n            palette=\"Blues\",\n            labels = c(\"< 1%\",\"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \">99%\")) +\n    tm_borders() +\n    tm_layout(main.title = mtitle, \n              title.position = c(\"right\", \"bottom\"))\n}\n\npercentmap(\"pct_functional\", NGA_wp,)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "title": "In Class Exercise 3: Analytical Mapping",
    "section": "4.2 Box map",
    "text": "4.2 Box map\n\n4.2.1 Using ggplot\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n4.2.2 Creating boxbreaks\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\n\n4.2.3 Creating get.var function\nTo retrieve a variable as a vector from an sf dataframe\n\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\n\n4.2.4 Test newly created function\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp)\nboxbreaks(var)\n\n[1] -53.5   0.0  14.0  34.0  59.0 126.5 252.0\n\n\n\n\n4.2.5 Boxmap function\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\n\n\n\n\n\n4.2.6 Recode zero\nThis is used to recode LGAs with zero total water point into NA\n\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In class exercise 4",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#handling-duplicated-point-event",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#handling-duplicated-point-event",
    "title": "In class exercise 4",
    "section": "Handling duplicated point event",
    "text": "Handling duplicated point event\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry=TRUE,\n                             nsim =1,\n                             drop = TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-an-owin-object",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-an-owin-object",
    "title": "In class exercise 4",
    "section": "Creating an owin object",
    "text": "Creating an owin object\n\nsg_owin <- as(sg_sp, \"owin\")\n\nplot(sg_owin)\n\n\n\n\n\nchildcareSG_ppp <- childcare_ppp_jit[sg_owin]\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In class exercise 5",
    "section": "",
    "text": "Install and Load Packages\n\npacman::p_load(sfdep, sf, tidyverse, tmap)\n\nNew package used is sfdep, used mainly for Local Co-Location Quotient\n\n\nImporting Data\nThe national projection system of Taiwan is EPSG::3829\n\nstudyArea <- st_read(dsn = \"data/\", \n                     layer = \"study_area\") %>%\n  st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/In-class_Ex/In-class_Ex05/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\nstores <- st_read(dsn = \"data/\", \n                  layer = \"stores\") %>%\n  st_transform(crs = 3829)\n\nReading layer `stores' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/In-class_Ex/In-class_Ex05/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\n\nVisualising sf layers\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(stores) +\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col=\"black\",\n          border.lwd= 0.5) +\n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nlocal_colocation(A, B, nb, wt, nsim), where - A\n\n\nLocal Colocation Quotients (LCLQ)\n\nnb <- include_self(\n  st_knn(st_geometry(stores), 6))\n# The number 6 indicates getting the 6 nearest stores (nearest neighbor)\n\n# List of lengths in nb showcases the numbers of the neighbors of a particular point\nwt <- st_kernel_weights(nb,\n                        stores,\n                        \"gaussian\",\n                        adaptive = TRUE)\n# List of lengths in wt showcases the weights: \n# The closer, the higher the weight, the further, the lower the weight\n\nFamilyMart <- stores %>%\n  filter(Name == \"Family Mart\")\nA<- FamilyMart$Name\n\nSevenEleven <- stores %>%\n  filter(Name == \"7-Eleven\")\nB<- SevenEleven$Name\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n\nLCLQ_stores <- cbind(stores, LCLQ) %>%\n  na.exclude()\n\n\n# Place stores first as the function takes on the structure of the first input.\n\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(LCLQ_stores) +\n  tm_dots(col = \"X7.Eleven\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\ntm_shape(LCLQ_stores) +\n  tm_dots(col = \"p_sim_7.Eleven\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)\n\n\n\n\n\n  tm_view(set.zoom.limits = c(12,16))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1] 12 16\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "href": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/stores.html",
    "href": "In-class_Ex/In-class_Ex05/data/stores.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nVisualising the distribution of water point by using appropriate analytical visualisation methods."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "3.1 Importing Aspatial data",
    "text": "3.1 Importing Aspatial data\nUse filter to extract only “Nigeria”\n\n\nShow code\nwp_nga <- read_csv(file = \"data/aspatial/WPdx.csv\") |>\n  filter(`#clean_country_name` == \"Nigeria\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#checking-duplicate-name-and-amending-them",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#checking-duplicate-name-and-amending-them",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.1 Checking duplicate name and amending them",
    "text": "5.1 Checking duplicate name and amending them\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nCorrect the areas as they are located in different states\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\nRerun code to check\n\n\nShow code\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]\n\n\ncharacter(0)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "6.1 Extracting Water Point Data",
    "text": "6.1 Extracting Water Point Data\nFilter based on functional, non_functional and unknown respectively.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>% \n  filter(status_clean %in% \n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean %in% \"unknown\")\n\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     47228      99.81           99.81\n2   Functional but not in use        86       0.18           99.99\n3 Functional but needs repair         4       0.01          100.00\n\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     30638      98.94           98.94\n2         Abandoned/Decommissioned       321       1.04           99.98\n3 Non-Functional due to dry season         7       0.02          100.00\n\n\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown     10154        100             100"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#performing-point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#performing-point-in-polygon-count",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "6.2 Performing Point-in-Polygon Count",
    "text": "6.2 Performing Point-in-Polygon Count\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualing-attributes-by-using-statistical-graph",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualing-attributes-by-using-statistical-graph",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "6.3 Visualing attributes by using statistical graph",
    "text": "6.3 Visualing attributes by using statistical graph\n\n\nShow code\nggplot(data = NGA_wp,\n       aes(x = total_wp)) +\n  geom_histogram(bins = 20, \n                 color = \"black\",\n                 fill =\"light blue\") +\n  geom_vline(aes(xintercept=mean(total_wp, na.rm=T)),\n             color = \"red\", linetype=\"dashed\", size = 0.8) +\n  xlab(\"No of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y = element_text(angle = 0))\n\n\n\n\n\n\n\nShow code\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tidyverse, tmap)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#importing-geospatial-data",
    "title": "In-class Exercise 6",
    "section": "2.1 Importing Geospatial data",
    "text": "2.1 Importing Geospatial data\n\nhunan <- st_read(dsn = \"data/geospatial/\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/junhaoteo/Documents/junhao2309/IS415/In-class_Ex/In-class_Ex06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#importing-aspatial-data",
    "title": "In-class Exercise 6",
    "section": "2.2 Importing Aspatial data",
    "text": "2.2 Importing Aspatial data\n\nhunan_2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nhunan_GDPPC <- dplyr::left_join(hunan, hunan_2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualize-the-data-on-a-choropleth-map",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualize-the-data-on-a-choropleth-map",
    "title": "In-class Exercise 6",
    "section": "2.3 Visualize the data on a Choropleth Map",
    "text": "2.3 Visualize the data on a Choropleth Map\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha =0.5) +\n  tm_compass(type = \"8star\", size =2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#contiguity-neighbours-method",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#contiguity-neighbours-method",
    "title": "In-class Exercise 6",
    "section": "3.1 Contiguity neighbours method",
    "text": "3.1 Contiguity neighbours method\nIn the code chunk below, st_contiguity() is used to derive a contiguity neighbour list by using Queen’s method. By default, st_contiguity() uses queen = TRUE.\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n         .before = 1)\n\nThe code chunk below uses st_contiguity() with queen = FALSE. This makes the contiguity neighbor list using the Rook’s method.\n\ncn_rook <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry, \n                            queen = FALSE),\n         .before = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-contiguity-weights",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-contiguity-weights",
    "title": "In-class Exercise 6",
    "section": "3.2 Computing contiguity weights",
    "text": "3.2 Computing contiguity weights\n\n3.2.1 Queen’s method\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)\n\n\n\n3.2.2 Rook’s method\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         queen = FALSE,\n         wt = st_weights(nb),\n         .before = 1)"
  }
]